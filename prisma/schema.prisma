datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum CampaignTypes {
  PRODUCT
  CATEGORY
  PRICE
}

enum PriceConditions {
  LESSTHAN
  GREATERTHAN
}

type OrderProduct {
  id String @db.ObjectId
  quantity Int
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  role          UserRole  @default(USER)
  image         String?
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  cart OrderProduct[]
  wishlist String[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  image String
  name String
  description String
  price Float
  isOnSale Boolean
  discount Float?
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId
  
  @@unique([id, categoryId])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type String @unique
  products Product[]
}

model Campaign {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  discountSet Float
  image String
  productOrCategoryUrl String

  type CampaignTypes
  priceCoefficient Float?
  priceCondition PriceConditions?
  modifiedProductIds String[] @db.ObjectId
  modifiedCategoryId String? @db.ObjectId
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  customerId String
  customerName String
  customerEmail String
  customerAddress String
  customerPhoneNumber String
  isDelivered Boolean

  products OrderProduct[]
  totalPrice Float
}
